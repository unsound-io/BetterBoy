open Astring

module S = String.Sub

(*

Quick and dirty implementation.
Looking at files generated by RBGlink, format is:
bank:addr functionSymbol
Comments are prefixed by ;

*)

let parse s =
  let t = Hashtbl.create 0x4000 in
  let s = String.Sub.of_string s in
  let skip_white s = String.Sub.drop ~sat:Char.Ascii.is_white s in
  let skip_to_next_line s =
    S.drop ~sat:(fun c -> not (Char.Ascii.is_control c)) s
    |> S.drop ~sat:Char.Ascii.is_control
  in
  let add_entry bank addr name =
    let hex_prefix = S.of_string "0x" in
    let bank = S.append hex_prefix bank |> S.to_int in
    let addr = S.append hex_prefix addr |> S.to_int in
    let name = S.to_string name in
    match bank, addr with
    | Some bank, Some addr -> Hashtbl.add t (bank, addr) name
    | _ -> ()
  in
  let rec aux s =
    match S.head s with
    | Some c when c = ';' -> aux (skip_to_next_line s)
    | None -> ()
    | Some _ ->
      let bank, s = S.span ~sat:Char.Ascii.is_hex_digit s in
      let addr, s = S.drop ~max:1 s |> S.span ~sat:Char.Ascii.is_hex_digit in
      let name, s = skip_white s |> S.span ~sat:Char.Ascii.is_print in
      add_entry bank addr name;
      aux (S.drop ~sat:Char.Ascii.is_control s)
  in
  aux s;
  t
